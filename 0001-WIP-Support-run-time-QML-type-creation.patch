From d823fee12436c6fd08c1760bb69ca8aac5e805e0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Morten=20Johan=20S=C3=B8rvig?= <morten.sorvig@theqtcompany.com>
Date: Sat, 25 Jan 2014 22:35:47 +0100
Subject: [PATCH] WIP: Support run-time QML type creation.

Add qmlRegisterCustomMetaObjectType, which lets you
specify:
	- a QMetaObject pointer
	- a create function
	- context for the create function

Change-Id: I93466550adb91344e7b3b384744237dbf3e65b0e
---
 src/qml/qml/qqml.h              | 63 +++++++++++++++++++++++++++++++++++------
 src/qml/qml/qqmlcompiler.cpp    |  1 +
 src/qml/qml/qqmlinstruction_p.h |  3 +-
 src/qml/qml/qqmlmetatype.cpp    | 16 +++++++++--
 src/qml/qml/qqmlmetatype_p.h    |  3 +-
 src/qml/qml/qqmlprivate.h       |  5 ++--
 src/qml/qml/qqmlvaluetype_p.h   |  2 +-
 src/qml/qml/qqmlvme.cpp         |  2 +-
 8 files changed, 78 insertions(+), 17 deletions(-)

diff --git a/src/qml/qml/qqml.h b/src/qml/qml/qqml.h
index 633953c..54b43bb 100644
--- a/src/qml/qml/qqml.h
+++ b/src/qml/qml/qqml.h
@@ -49,6 +49,7 @@
 
 #include <QtCore/qbytearray.h>
 #include <QtCore/qmetaobject.h>
+#include <QtCore/qdebug.h>
 
 #define QML_VERSION     0x020000
 #define QML_VERSION_STR "2.0"
@@ -101,6 +102,21 @@ class QQmlPropertyValueInterceptor;
     listName[listLen+nameLen] = '>'; \
     listName[listLen+nameLen+1] = '\0';
 
+
+#define QML_GETTYPENAMES2 \
+    const char *className = metaObject->className(); \
+    const int nameLen = int(strlen(className)); \
+    QVarLengthArray<char,48> pointerName(nameLen+2); \
+    memcpy(pointerName.data(), className, nameLen); \
+    pointerName[nameLen] = '*'; \
+    pointerName[nameLen+1] = '\0'; \
+    const int listLen = int(strlen("QQmlListProperty<")); \
+    QVarLengthArray<char,64> listName(listLen + nameLen + 2); \
+    memcpy(listName.data(), "QQmlListProperty<", listLen); \
+    memcpy(listName.data()+listLen, className, nameLen); \
+    listName[listLen+nameLen] = '>'; \
+    listName[listLen+nameLen+1] = '\0';
+
 void Q_QML_EXPORT qmlClearTypeRegistrations();
 
 template<typename T>
@@ -113,7 +129,7 @@ int qmlRegisterType()
 
         qRegisterNormalizedMetaType<T *>(pointerName.constData()),
         qRegisterNormalizedMetaType<QQmlListProperty<T> >(listName.constData()),
-        0, 0,
+        0, 0, 0,
         QString(),
 
         0, 0, 0, 0, &T::staticMetaObject,
@@ -146,7 +162,7 @@ int qmlRegisterUncreatableType(const char *uri, int versionMajor, int versionMin
 
         qRegisterNormalizedMetaType<T *>(pointerName.constData()),
         qRegisterNormalizedMetaType<QQmlListProperty<T> >(listName.constData()),
-        0, 0,
+        0, 0, 0,
         reason,
 
         uri, versionMajor, versionMinor, qmlName, &T::staticMetaObject,
@@ -177,7 +193,7 @@ int qmlRegisterUncreatableType(const char *uri, int versionMajor, int versionMin
 
         qRegisterNormalizedMetaType<T *>(pointerName.constData()),
         qRegisterNormalizedMetaType<QQmlListProperty<T> >(listName.constData()),
-        0, 0,
+        0, 0, 0,
         reason,
 
         uri, versionMajor, versionMinor, qmlName, &T::staticMetaObject,
@@ -208,7 +224,7 @@ int qmlRegisterType(const char *uri, int versionMajor, int versionMinor, const c
 
         qRegisterNormalizedMetaType<T *>(pointerName.constData()),
         qRegisterNormalizedMetaType<QQmlListProperty<T> >(listName.constData()),
-        sizeof(T), QQmlPrivate::createInto<T>,
+        sizeof(T), QQmlPrivate::createInto<T>, 0,
         QString(),
 
         uri, versionMajor, versionMinor, qmlName, &T::staticMetaObject,
@@ -229,6 +245,37 @@ int qmlRegisterType(const char *uri, int versionMajor, int versionMinor, const c
     return QQmlPrivate::qmlregister(QQmlPrivate::TypeRegistration, &type);
 }
 
+template<typename T>
+int qmlRegisterCustomMetaObjectType(const char *uri, int versionMajor, int versionMinor, const char *qmlName,
+                                    void (*createFn)(void *, void *), void *context, const QMetaObject *metaObject)
+{
+    QML_GETTYPENAMES2
+
+    QQmlPrivate::RegisterType type = {
+        0,
+
+        qRegisterNormalizedMetaType<T *>(pointerName.constData()),
+        qRegisterNormalizedMetaType<QQmlListProperty<T> >(listName.constData()),
+        sizeof(T), createFn, context,
+        QString(),
+
+        uri, versionMajor, versionMinor, qmlName, metaObject,
+
+        QQmlPrivate::attachedPropertiesFunc<T>(),
+        QQmlPrivate::attachedPropertiesMetaObject<T>(),
+
+        QQmlPrivate::StaticCastSelector<T,QQmlParserStatus>::cast(),
+        QQmlPrivate::StaticCastSelector<T,QQmlPropertyValueSource>::cast(),
+        QQmlPrivate::StaticCastSelector<T,QQmlPropertyValueInterceptor>::cast(),
+
+        0, 0,
+
+        0,
+        0
+    };
+    return QQmlPrivate::qmlregister(QQmlPrivate::TypeRegistration, &type);
+}
+
 template<typename T, int metaObjectRevision>
 int qmlRegisterType(const char *uri, int versionMajor, int versionMinor, const char *qmlName)
 {
@@ -239,7 +286,7 @@ int qmlRegisterType(const char *uri, int versionMajor, int versionMinor, const c
 
         qRegisterNormalizedMetaType<T *>(pointerName.constData()),
         qRegisterNormalizedMetaType<QQmlListProperty<T> >(listName.constData()),
-        sizeof(T), QQmlPrivate::createInto<T>,
+        sizeof(T), QQmlPrivate::createInto<T>, 0,
         QString(),
 
         uri, versionMajor, versionMinor, qmlName, &T::staticMetaObject,
@@ -270,7 +317,7 @@ int qmlRegisterRevision(const char *uri, int versionMajor, int versionMinor)
 
         qRegisterNormalizedMetaType<T *>(pointerName.constData()),
         qRegisterNormalizedMetaType<QQmlListProperty<T> >(listName.constData()),
-        sizeof(T), QQmlPrivate::createInto<T>,
+        sizeof(T), QQmlPrivate::createInto<T>, 0,
         QString(),
 
         uri, versionMajor, versionMinor, 0, &T::staticMetaObject,
@@ -341,7 +388,7 @@ int qmlRegisterExtendedType(const char *uri, int versionMajor, int versionMinor,
 
         qRegisterNormalizedMetaType<T *>(pointerName.constData()),
         qRegisterNormalizedMetaType<QQmlListProperty<T> >(listName.constData()),
-        sizeof(T), QQmlPrivate::createInto<T>,
+        sizeof(T), QQmlPrivate::createInto<T>, 0,
         QString(),
 
         uri, versionMajor, versionMinor, qmlName, &T::staticMetaObject,
@@ -393,7 +440,7 @@ int qmlRegisterCustomType(const char *uri, int versionMajor, int versionMinor,
 
         qRegisterNormalizedMetaType<T *>(pointerName.constData()),
         qRegisterNormalizedMetaType<QQmlListProperty<T> >(listName.constData()),
-        sizeof(T), QQmlPrivate::createInto<T>,
+        sizeof(T), QQmlPrivate::createInto<T>, 0,
         QString(),
 
         uri, versionMajor, versionMinor, qmlName, &T::staticMetaObject,
diff --git a/src/qml/qml/qqmlcompiler.cpp b/src/qml/qml/qqmlcompiler.cpp
index c71c743..c536c56 100644
--- a/src/qml/qml/qqmlcompiler.cpp
+++ b/src/qml/qml/qqmlcompiler.cpp
@@ -1198,6 +1198,7 @@ void QQmlCompiler::genObject(QQmlScript::Object *obj, bool parentToSuper)
 
         Instruction::CreateSimpleObject create;
         create.create = output->types.at(obj->type).type->createFunction();
+        create.context = output->types.at(obj->type).type->createContext();
         create.typeSize = output->types.at(obj->type).type->createSize();
         create.type = obj->type;
         create.line = obj->location.start.line;
diff --git a/src/qml/qml/qqmlinstruction_p.h b/src/qml/qml/qqmlinstruction_p.h
index 314debc..7966ed7 100644
--- a/src/qml/qml/qqmlinstruction_p.h
+++ b/src/qml/qml/qqmlinstruction_p.h
@@ -209,7 +209,8 @@ union QQmlInstruction
     };
     struct instr_createSimple {
         QML_INSTR_HEADER
-        void (*create)(void *);
+        void (*create)(void *, void *);
+        void *context;
         int typeSize;
         int type;
         ushort column;
diff --git a/src/qml/qml/qqmlmetatype.cpp b/src/qml/qml/qqmlmetatype.cpp
index 90d3ca3..277e162 100644
--- a/src/qml/qml/qqmlmetatype.cpp
+++ b/src/qml/qml/qqmlmetatype.cpp
@@ -170,7 +170,8 @@ public:
     struct QQmlCppTypeData
     {
         int allocationSize;
-        void (*newFunc)(void *);
+        void (*newFunc)(void *, void *);
+        void *newContext;
         QString noCreationReason;
         int parserStatusCast;
         QObject *(*extFunc)(QObject *);
@@ -282,6 +283,7 @@ QQmlTypePrivate::QQmlTypePrivate(QQmlType::RegistrationType type)
         extraData.cd = new QQmlCppTypeData;
         extraData.cd->allocationSize = 0;
         extraData.cd->newFunc = 0;
+        extraData.cd->newContext = 0;
         extraData.cd->parserStatusCast = -1;
         extraData.cd->extFunc = 0;
         extraData.cd->extMetaObject = 0;
@@ -396,6 +398,7 @@ QQmlType::QQmlType(int index, const QString &elementName, const QQmlPrivate::Reg
     d->listId = type.listId;
     d->extraData.cd->allocationSize = type.objectSize;
     d->extraData.cd->newFunc = type.create;
+    d->extraData.cd->newContext = type.context;
     d->extraData.cd->noCreationReason = type.noCreationReason;
     d->baseMetaObject = type.metaObject;
     d->extraData.cd->attachedPropertiesFunc = type.attachedPropertiesFunction;
@@ -714,7 +717,7 @@ QObject *QQmlType::create() const
     d->init();
 
     QObject *rv = (QObject *)operator new(d->extraData.cd->allocationSize);
-    d->extraData.cd->newFunc(rv);
+    d->extraData.cd->newFunc(rv, d->extraData.cd->newContext);
 
     if (rv && !d->metaObjects.isEmpty())
         (void)new QQmlProxyMetaObject(rv, &d->metaObjects);
@@ -730,7 +733,7 @@ void QQmlType::create(QObject **out, void **memory, size_t additionalMemory) con
     d->init();
 
     QObject *rv = (QObject *)operator new(d->extraData.cd->allocationSize + additionalMemory);
-    d->extraData.cd->newFunc(rv);
+    d->extraData.cd->newFunc(rv, d->extraData.cd->newContext);
 
     if (rv && !d->metaObjects.isEmpty())
         (void)new QQmlProxyMetaObject(rv, &d->metaObjects);
@@ -760,6 +763,13 @@ QQmlType::CreateFunc QQmlType::createFunction() const
     return d->extraData.cd->newFunc;
 }
 
+void * QQmlType::createContext() const
+{
+    if (d->regType != CppType)
+        return 0;
+    return d->extraData.cd->newContext;
+}
+
 QString QQmlType::noCreationReason() const
 {
     if (d->regType != CppType)
diff --git a/src/qml/qml/qqmlmetatype_p.h b/src/qml/qml/qqmlmetatype_p.h
index 019e6b8..2093373 100644
--- a/src/qml/qml/qqmlmetatype_p.h
+++ b/src/qml/qml/qqmlmetatype_p.h
@@ -157,8 +157,9 @@ public:
     QObject *create() const;
     void create(QObject **, void **, size_t) const;
 
-    typedef void (*CreateFunc)(void *);
+    typedef void (*CreateFunc)(void *, void *context);
     CreateFunc createFunction() const;
+    void * createContext() const;
     int createSize() const;
 
     QQmlCustomParser *customParser() const;
diff --git a/src/qml/qml/qqmlprivate.h b/src/qml/qml/qqmlprivate.h
index 90e7961..646845a 100644
--- a/src/qml/qml/qqmlprivate.h
+++ b/src/qml/qml/qqmlprivate.h
@@ -91,7 +91,7 @@ namespace QQmlPrivate
     };
 
     template<typename T>
-    void createInto(void *memory) { new (memory) QQmlElement<T>; }
+    void createInto(void *memory, void *context) { Q_UNUSED(context); new (memory) QQmlElement<T>; }
 
     template<typename T>
     QObject *createParent(QObject *p) { return new T(p); }
@@ -197,7 +197,8 @@ namespace QQmlPrivate
         int typeId;
         int listId;
         int objectSize;
-        void (*create)(void *);
+        void (*create)(void *, void *);
+        void *context;
         QString noCreationReason;
 
         const char *uri;
diff --git a/src/qml/qml/qqmlvaluetype_p.h b/src/qml/qml/qqmlvaluetype_p.h
index 953ea21..8ce5919 100644
--- a/src/qml/qml/qqmlvaluetype_p.h
+++ b/src/qml/qml/qqmlvaluetype_p.h
@@ -341,7 +341,7 @@ int qmlRegisterValueTypeEnums(const char *uri, int versionMajor, int versionMino
     QQmlPrivate::RegisterType type = {
         0,
 
-        qRegisterNormalizedMetaType<T *>(pointerName.constData()), 0, 0, 0,
+        qRegisterNormalizedMetaType<T *>(pointerName.constData()), 0, 0, 0, 0,
 
         QString(),
 
diff --git a/src/qml/qml/qqmlvme.cpp b/src/qml/qml/qqmlvme.cpp
index ce4997f..195c410 100644
--- a/src/qml/qml/qqmlvme.cpp
+++ b/src/qml/qml/qqmlvme.cpp
@@ -659,7 +659,7 @@ QObject *QQmlVME::run(QList<QQmlError> *errors,
             Q_QML_VME_PROFILE(profiler, start(ref.type->qmlTypeName(), CTXT->url, instr.line, instr.column));
             QObject *o = (QObject *)operator new(instr.typeSize + sizeof(QQmlData));
             ::memset(static_cast<void *>(o), 0, instr.typeSize + sizeof(QQmlData));
-            instr.create(o);
+            instr.create(o, instr.context);
 
             QQmlData *ddata = (QQmlData *)(((const char *)o) + instr.typeSize);
             if (!ddata->propertyCache && ref.typePropertyCache) {
-- 
1.9.3

